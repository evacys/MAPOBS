# Generated by Django 2.0.5 on 2018-07-30 11:15

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcquisitionMethod',
            fields=[
                ('am_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, acquisition method identifier')),
                ('stime', models.DateTimeField(verbose_name='Start time')),
                ('stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('etime', models.DateTimeField(verbose_name='End time')),
                ('etime_unc', models.DateTimeField(verbose_name='End time uncertainty')),
                ('am_vector', models.CharField(choices=[('SATEL', 'Satellite'), ('AIRPL', 'Airplane'), ('WALK', 'Walk'), ('ULM', 'Ulm'), ('DRONE', 'Drone')], max_length=5)),
                ('desc', models.CharField(max_length=255, verbose_name='Description')),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
            ],
            options={
                'db_table': 'am',
            },
        ),
        migrations.CreateModel(
            name='AcquisitionTool',
            fields=[
                ('at_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, acquisition tool identifier')),
                ('cam', models.CharField(max_length=255, verbose_name='Camera')),
                ('resolution_cam', models.FloatField(verbose_name='Camera resolution')),
                ('optical', models.IntegerField(verbose_name='optical number')),
                ('resolution_ground', models.FloatField(verbose_name='ground resolution')),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('am_ids', models.ManyToManyField(to='app.AcquisitionMethod')),
            ],
            options={
                'db_table': 'at',
            },
        ),
        migrations.CreateModel(
            name='Bibliographic',
            fields=[
                ('cb_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, bibliography identifier')),
                ('cb_auth', models.CharField(max_length=255, verbose_name='Authors/Editors')),
                ('cb_year', models.DateTimeField(verbose_name='Publication year')),
                ('cb_title', models.CharField(max_length=255, verbose_name='Title')),
                ('cb_journ', models.CharField(max_length=255, verbose_name='Journal')),
                ('cb_vol', models.CharField(max_length=20, verbose_name='Volume')),
                ('cb_pub', models.CharField(max_length=50, verbose_name='Publisher')),
                ('cb_page', models.CharField(max_length=30, verbose_name='Pages')),
                ('cb_doi', models.CharField(max_length=20, verbose_name='Digital Object Identifier')),
                ('cb_isbn', models.CharField(max_length=13, verbose_name='International Standard Book Number')),
                ('cb_url', models.URLField(max_length=255, verbose_name='Info on the web')),
                ('cb_labadr', models.CharField(max_length=320, verbose_name='Email address of observatory')),
                ('cb_keywords', models.CharField(max_length=255, verbose_name='Keywords')),
                ('cb_com', models.CharField(max_length=255, verbose_name='Comments')),
                ('cb_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
            ],
            options={
                'db_table': 'cb',
            },
        ),
        migrations.CreateModel(
            name='Composition',
            fields=[
                ('compo_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, composition identifier')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
            ],
            options={
                'db_table': 'compo',
            },
        ),
        migrations.CreateModel(
            name='Cone',
            fields=[
                ('cone_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, cone identifier')),
                ('name', models.CharField(max_length=60, verbose_name='ConeName')),
                ('cone_type', models.CharField(choices=[('STRAT', 'Stratocone'), ('SPATT', 'Spatter cone'), ('TUFFC', 'Tuff cones'), ('CINDE', 'Cinder cone'), ('ROOTL', 'Rootless cones')], max_length=5)),
                ('stime', models.DateTimeField(verbose_name='Start time')),
                ('time_bc', models.IntegerField(verbose_name='Year of start time before Christ')),
                ('stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('height', models.FloatField(verbose_name='Height of the cone')),
                ('accretion_date', models.DateTimeField(verbose_name='Date of accretion')),
                ('accretion_date_bc', models.IntegerField(verbose_name='Year of accretion date before Christ')),
                ('accretion_date_unc', models.DateTimeField(verbose_name='Accretion date uncertainty')),
                ('disappearance_date', models.DateTimeField(verbose_name='Date of disappearance')),
                ('disappearance_date_bc', models.IntegerField(verbose_name='Year of disappearance date before Christ')),
                ('disappearance_date_unc', models.DateTimeField(verbose_name='Disappearance date uncertainty')),
                ('crater_diameter', models.FloatField(verbose_name='Crater diameter')),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=32740)),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
            ],
            options={
                'db_table': 'cone',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('cc_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Contact ID')),
                ('cc_code', models.CharField(max_length=15, verbose_name='Contact Code')),
                ('cc_code2', models.CharField(blank=True, max_length=15, verbose_name='Contact Code alias')),
                ('cc_fname', models.CharField(blank=True, max_length=30, verbose_name='First name')),
                ('cc_lname', models.CharField(blank=True, max_length=30, verbose_name='Last name')),
                ('cc_obs', models.CharField(blank=True, max_length=150, verbose_name='Observatory')),
                ('cc_add1', models.CharField(blank=True, max_length=60, verbose_name='Address 1')),
                ('cc_add2', models.CharField(blank=True, max_length=60, verbose_name='Address 2')),
                ('cc_city', models.CharField(blank=True, max_length=50, verbose_name='City')),
                ('cc_state', models.CharField(blank=True, max_length=30, verbose_name='State')),
                ('cc_country', models.CharField(blank=True, max_length=50, verbose_name='Country')),
                ('cc_post', models.CharField(blank=True, max_length=30, verbose_name='Postal code')),
                ('cc_url', models.CharField(blank=True, max_length=255, verbose_name='Web address')),
                ('cc_email', models.CharField(blank=True, max_length=320, verbose_name='Email')),
                ('cc_phone', models.CharField(blank=True, max_length=50, verbose_name='Phone')),
                ('cc_phone2', models.CharField(blank=True, max_length=50, verbose_name='Phone 2')),
                ('cc_fax', models.CharField(blank=True, max_length=60, verbose_name='Fax')),
                ('cc_com', models.CharField(blank=True, max_length=255, verbose_name='Comments')),
                ('cc_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
            ],
            options={
                'db_table': 'cc',
            },
        ),
        migrations.CreateModel(
            name='Eruption',
            fields=[
                ('ed_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, eruption identifier (index)')),
                ('ed_code', models.CharField(max_length=30, verbose_name='EruptionCode')),
                ('ed_name', models.CharField(max_length=60, verbose_name='EruptionName')),
                ('ed_nar', models.CharField(max_length=255, verbose_name='Narrative')),
                ('ed_stime', models.DateTimeField(verbose_name='Start time')),
                ('ed_stime_bc', models.IntegerField(verbose_name='Year of start time before Christ')),
                ('ed_stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('ed_etime', models.DateTimeField(verbose_name='End time')),
                ('ed_etime_bc', models.IntegerField(verbose_name='Year of end time before Christ')),
                ('ed_etime_unc', models.DateTimeField(verbose_name='End time uncertainty')),
                ('ed_climax', models.DateTimeField(verbose_name='Onset of climax')),
                ('ed_climax_bc', models.IntegerField(verbose_name='Year of climax time before Christ')),
                ('ed_climax_unc', models.DateTimeField(verbose_name='Onset of climax uncertainty')),
                ('ed_com', models.CharField(max_length=255, verbose_name='Comments')),
                ('ed_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('ed_pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=32740)),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ed_cc_id', to='app.Contact')),
                ('cc_id2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ed_cc_id2', to='app.Contact')),
                ('cc_id3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ed_cc_id3', to='app.Contact')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ed_cc_id_load', to='app.Contact')),
            ],
            options={
                'db_table': 'ed',
            },
        ),
        migrations.CreateModel(
            name='Fissure',
            fields=[
                ('fissure_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, fissure identifier')),
                ('opentime', models.DateTimeField(verbose_name='Open time')),
                ('opentime_bc', models.IntegerField(verbose_name='Year of open time before Christ')),
                ('opentime_unc', models.DateTimeField(verbose_name='Open time uncertainty')),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=32740)),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fissure_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fissure_cc_id_pub', to='app.Contact')),
                ('ed_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fissure_ed_id', to='app.Eruption')),
            ],
            options={
                'db_table': 'fissure',
            },
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('flow_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, flow identifier')),
                ('stime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('stime_bc', models.IntegerField(null=True, verbose_name='Year of start time before Christ')),
                ('stime_unc', models.DateTimeField(null=True, verbose_name='Start time uncertainty')),
                ('etime', models.DateTimeField(null=True, verbose_name='End time')),
                ('etime_bc', models.IntegerField(null=True, verbose_name='Year of end time before Christ')),
                ('etime_unc', models.DateTimeField(null=True, verbose_name='End time uncertainty')),
                ('final_vers', models.BooleanField(default=False, verbose_name="1 if it's the final version, else 0")),
                ('com', models.CharField(max_length=255, null=True, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(null=True, verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(null=True, verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=32740)),
                ('cb_ids', models.ManyToManyField(null=True, to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flow_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flow_cc_id_pub', to='app.Contact')),
                ('fissure_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flow_fissure_id', to='app.Fissure')),
            ],
            options={
                'db_table': 'flow',
            },
        ),
        migrations.CreateModel(
            name='MntOrtho',
            fields=[
                ('mo_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, mntOrtho identifier')),
                ('gcp_num', models.IntegerField(verbose_name='Gcp number')),
                ('reference_altitude', models.FloatField(verbose_name='Reference altitude')),
                ('precision', models.FloatField(verbose_name='Accuracy of the reference altitude')),
                ('mo_type', models.CharField(choices=[('MNT', 'Mnt'), ('ORTHO', 'Orthophoto')], max_length=5)),
                ('mo_gcp_type', models.CharField(choices=[('GNSSM', 'GNSS measure'), ('RIMAG', 'Replicated image')], max_length=5)),
                ('mo_software', models.CharField(choices=[('PHOTO', 'PhotoScan'), ('MICMA', 'MicMac'), ('ERDAS', 'ERDAS'), ('ARCVI', 'ArcView'), ('POIVI', 'Poivillier'), ('ENVI', 'Envi'), ('GLOBM', 'Global Mapper'), ('CLOUD', 'Cloud Compare')], max_length=5)),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('am_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mo_am_id', to='app.AcquisitionMethod')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mo_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mo_cc_id_pub', to='app.Contact')),
                ('flow_ids', models.ManyToManyField(to='app.Flow')),
            ],
            options={
                'db_table': 'mo',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('co_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Observation ID')),
                ('co_code', models.CharField(default='', max_length=30, verbose_name='Observation code')),
                ('co_observe', models.TextField(verbose_name='Description')),
                ('co_stime', models.DateTimeField(verbose_name='Start time')),
                ('co_stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('co_etime', models.DateTimeField(verbose_name='End time')),
                ('co_etime_unc', models.DateTimeField(verbose_name='End time uncertainty')),
                ('co_com', models.CharField(max_length=255, verbose_name='Comments')),
                ('co_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('co_pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id', to='app.Contact')),
                ('cc_id2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id2', to='app.Contact')),
                ('cc_id3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id3', to='app.Contact')),
                ('cc_id4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id4', to='app.Contact')),
                ('cc_id5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id5', to='app.Contact')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_cc_id_load', to='app.Contact')),
            ],
            options={
                'db_table': 'co',
            },
        ),
        migrations.CreateModel(
            name='Petrology',
            fields=[
                ('petro_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, petrology identifier')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petro_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petro_cc_id_pub', to='app.Contact')),
                ('cone_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petro_cone_id', to='app.Cone')),
                ('flow_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petro_flow_id', to='app.Flow')),
            ],
            options={
                'db_table': 'petro',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('sample_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, identifier')),
                ('sample_code', models.CharField(default='Null', max_length=30, verbose_name='Code')),
                ('sample_location', models.CharField(default='Null', max_length=255, verbose_name='Location')),
                ('sample_elevation', models.FloatField(default='Null', verbose_name='Elevation')),
                ('sample_date', models.DateTimeField(verbose_name='Sample date')),
                ('sample_samplingtime', models.DateTimeField(verbose_name='Sampling time')),
                ('sample_type', models.CharField(default='Null', max_length=5, verbose_name='Type')),
                ('sample_collection_method', models.CharField(default='Null', max_length=5, verbose_name='Collection method')),
                ('sample_collection_tool', models.CharField(default='Null', max_length=5, verbose_name='Collection tool')),
                ('sample_size', models.FloatField(default='Null', verbose_name='Size')),
                ('sample_weight', models.FloatField(default='Null', verbose_name='Weight')),
                ('sample_texture', models.CharField(default='Null', max_length=255, verbose_name='Texture')),
                ('sample_geological_age', models.DateTimeField(verbose_name='Geological age')),
                ('sample_geological_unit', models.CharField(default='Null', max_length=10, verbose_name='Geological unit')),
                ('sample_gsn_rock', models.IntegerField(default='Null', verbose_name='IGSN number')),
                ('sample_label_rock', models.CharField(default='Null', max_length=30, verbose_name='Label unit')),
                ('sample_photo', models.URLField(default='Null', max_length=255, verbose_name='URL link')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
            ],
            options={
                'db_table': 'sample',
            },
        ),
        migrations.CreateModel(
            name='SatelliteAirplane',
            fields=[
                ('cs_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, satellite airplane identifier')),
                ('cs_code', models.CharField(max_length=40, verbose_name='Code')),
                ('cs_type', models.CharField(choices=[('S', 'Satellite'), ('A', 'Airplane')], max_length=5)),
                ('cs_name', models.CharField(max_length=50, verbose_name='Name')),
                ('stime', models.DateTimeField(verbose_name='Start time')),
                ('stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('etime', models.DateTimeField(verbose_name='End time')),
                ('etime_unc', models.DateTimeField(verbose_name='End time uncertainty')),
                ('desc', models.CharField(max_length=255, verbose_name='Description')),
                ('cs_ori', models.CharField(choices=[('D', 'digitized/Bibliography'), ('O', 'Original from observatory')], max_length=5)),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cs_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cs_cc_id_pub', to='app.Contact')),
            ],
            options={
                'db_table': 'cs',
            },
        ),
        migrations.CreateModel(
            name='Tephras',
            fields=[
                ('teph_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, tephras identifier')),
                ('accretion_date', models.DateTimeField(verbose_name='Date of accretion')),
                ('accretion_date_bc', models.IntegerField(verbose_name='Year of accretion date before Christ')),
                ('accretion_date_unc', models.DateTimeField(verbose_name='Accretion date uncertainty')),
                ('disappearance_date', models.DateTimeField(verbose_name='Date of disappearance')),
                ('disappearance_date_bc', models.IntegerField(verbose_name='Year of disappearance date before Christ')),
                ('disappearance_date_unc', models.DateTimeField(verbose_name='Disappearance date uncertainty')),
                ('teph_granulometry', models.CharField(choices=[('', ''), ('', '')], max_length=5)),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=32740)),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teph_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teph_cc_id_pub', to='app.Contact')),
                ('fissure_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teph_fissure_id', to='app.Fissure')),
            ],
            options={
                'db_table': 'teph',
            },
        ),
        migrations.CreateModel(
            name='Volcano',
            fields=[
                ('vd_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, Volcano Identifier (Index)')),
                ('vd_cavw', models.CharField(max_length=15, verbose_name='The current CAVW number')),
                ('vd_name', models.CharField(max_length=255, verbose_name='Volcano Name (first)')),
                ('vd_name2', models.CharField(max_length=255, verbose_name='Volcano Name (second)')),
                ('vd_tzone', models.FloatField(verbose_name='Time zone (relative to UTC)')),
                ('vd_mcont', models.CharField(max_length=1, verbose_name='M=Multiple contacts for this volcano')),
                ('vd_com', models.CharField(max_length=255, verbose_name='Comments')),
                ('vd_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('vd_pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('geometry', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=32740)),
                ('cc_id1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id1', to='app.Contact')),
                ('cc_id2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id2', to='app.Contact')),
                ('cc_id3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id3', to='app.Contact')),
                ('cc_id4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id4', to='app.Contact')),
                ('cc_id5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id5', to='app.Contact')),
                ('cc_id_load', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_cc_id_load', to='app.Contact')),
            ],
            options={
                'db_table': 'vd',
            },
        ),
        migrations.CreateModel(
            name='VolcanoInformation',
            fields=[
                ('vd_inf_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, volcano information identifier (index)')),
                ('vd_inf_cavw', models.CharField(max_length=15, verbose_name='CAVW number, the current CAVW number')),
                ('vd_inf_status', models.CharField(choices=[('ANTHR', 'Anthropology'), ('AR/AR', 'Ar/Ar'), ('DENDR', 'Dendrochronology'), ('FUMAR', 'Fumarolic'), ('HISTO', 'Historical'), ('HOLO1', 'Holocene'), ('HOLO2', 'Holocene?'), ('HOTSP', 'Hot Springs'), ('HYDRA', 'Hydration Rind'), ('HYDRO', 'Hydrophonic'), ('ICECO', 'Ice Core'), ('LICHE', 'Lichenometry'), ('MAGNE', 'Magnetism'), ('PLEIS', 'Pleistocene'), ('POTAS', 'Potassium-Argon'), ('RADIO', 'Radiocarbon'), ('SEISM', 'Seismicity'), ('SURFA', 'Surface Exposure'), ('TEPHR', 'Tephrochronology'), ('THERM', 'Thermoluminescence'), ('UNCER', 'Uncertain'), ('URANI', 'Uranium-series'), ('VARVE', 'Varve Count'), ('UNKNO', 'Unknown')], default='UNKNO', max_length=5)),
                ('vd_inf_desc', models.CharField(max_length=255, verbose_name='Short narrative')),
                ('vd_inf_slat', models.FloatField(verbose_name='Summit latitude')),
                ('vd_inf_slon', models.FloatField(verbose_name='Summit longitude')),
                ('vd_inf_selev', models.FloatField(verbose_name='Summit elevation')),
                ('vd_inf_type', models.CharField(choices=[('CALDE', 'Caldera'), ('CINDE', 'Cinder cone'), ('COMPL', 'Complex volcano'), ('COMPO', 'Compound volcano'), ('CONE', 'Cone'), ('CRATE', 'Crater rows'), ('EXPLO', 'Explosion craters'), ('FISSU', 'Fissure vent'), ('HYDRO', 'Hydrothermal field'), ('LAVAC', 'Lava cone'), ('LAVAD', 'Lava dome'), ('MAAR', 'Maar'), ('PUMIC', 'Pumice cone'), ('PYROC', 'Pyroclastic cone'), ('PYROS', 'Pyroclastic shield'), ('SCORI', 'Scoria cone'), ('SHIEL', 'Shield volcano'), ('SOMMA', 'Somma volcano'), ('STRAT', 'Stratovolcano'), ('SUBGL', 'Subglacial volcano'), ('SUBMA', 'Submarine volcano'), ('TUFFC', 'Tuff cone'), ('TUFFR', 'Tuff ring'), ('UNKNO', 'Unknown'), ('VOLCC', 'Volcanic complex'), ('VOLCF', 'Volcanic field')], default='UNKNO', max_length=5)),
                ('vd_inf_loc', models.CharField(max_length=30, verbose_name='Geographic location')),
                ('vd_inf_rtype', models.CharField(choices=[('BASAL', 'Basalt'), ('TETRA', 'Tephrit/Trachybasalt'), ('ANBAS', 'Andesite/Basaltic-andesite'), ('TRAAN', 'Trachyandesite'), ('DACIT', 'Dacite'), ('RHYOL', 'Rhyolite'), ('TRACH', 'Trachyte'), ('PHONO', 'Phonolite'), ('PHOTE', 'Phonotephrite'), ('FOIDI', 'Foidite'), ('UNKNO', 'Unknown')], default='UNKNO', max_length=5)),
                ('vd_inf_evol', models.FloatField(verbose_name='Volume of edifice')),
                ('vd_inf_numcal', models.IntegerField(verbose_name='Number of calderas')),
                ('vd_inf_lcad_dia', models.FloatField(verbose_name='Diameter of largest caldera')),
                ('vd_inf_ycald_lat', models.FloatField(verbose_name='Latitude of youngest caldera')),
                ('vd_inf_ycald_lon', models.FloatField(verbose_name='Longitude of youngest caldera')),
                ('vd_inf_stime', models.DateTimeField(verbose_name='Start time')),
                ('vd_inf_stime_unc', models.DateTimeField(verbose_name='Start time uncertainty')),
                ('vd_inf_etime', models.DateTimeField(verbose_name='End time')),
                ('vd_inf_etime_unc', models.DateTimeField(verbose_name='End time uncertainty')),
                ('vd_inf_com', models.CharField(max_length=255, verbose_name='Comments')),
                ('vd_inf_loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('vd_inf_pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('cc_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_inf_cc_id', to='app.Contact')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_inf_cc_id_load', to='app.Contact')),
                ('vd_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vd_inf_vd_id', to='app.Volcano')),
            ],
            options={
                'db_table': 'vd_inf',
            },
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('volume_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID, volume identifier')),
                ('value_mesured', models.FloatField(verbose_name='value measured')),
                ('value_calculated', models.FloatField(verbose_name='value calculated')),
                ('volume_method', models.CharField(choices=[('TOPO', 'Topographic'), ('TADRT', 'TADR Turin'), ('TADRC', 'TADR Clermont'), ('GAZ', 'Gaz')], max_length=5)),
                ('com', models.CharField(max_length=255, verbose_name='Comments')),
                ('loaddate', models.DateTimeField(verbose_name='Load date, the date the data was entered (in UTC)')),
                ('pubdate', models.DateTimeField(verbose_name='Publish date, the date the data become public')),
                ('cb_ids', models.ManyToManyField(to='app.Bibliographic')),
                ('cc_id_load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volume_cc_id_load', to='app.Contact')),
                ('cc_id_pub', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volume_cc_id_pub', to='app.Contact')),
                ('cone_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volume_cone_id', to='app.Cone')),
                ('flow_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volume_flow_id', to='app.Flow')),
                ('teph_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volume_teph_id', to='app.Tephras')),
            ],
            options={
                'db_table': 'volume',
            },
        ),
        migrations.AddField(
            model_name='petrology',
            name='teph_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='petro_teph_id', to='app.Tephras'),
        ),
        migrations.AddField(
            model_name='observation',
            name='vd_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_vd_id', to='app.Volcano'),
        ),
        migrations.AddField(
            model_name='eruption',
            name='vd_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ed_vd_id', to='app.Volcano'),
        ),
        migrations.AddField(
            model_name='cone',
            name='cc_id_load',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cone_cc_id_load', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='cone',
            name='cc_id_pub',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cone_cc_id_pub', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='cone',
            name='fissure_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cone_fissure_id', to='app.Fissure'),
        ),
        migrations.AddField(
            model_name='composition',
            name='cc_id_load',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compo_cc_id_load', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='composition',
            name='cc_id_pub',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compo_cc_id_pub', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='composition',
            name='cone_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compo_cone_id', to='app.Cone'),
        ),
        migrations.AddField(
            model_name='composition',
            name='flow_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compo_flow_id', to='app.Flow'),
        ),
        migrations.AddField(
            model_name='composition',
            name='teph_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compo_teph_id', to='app.Tephras'),
        ),
        migrations.AddField(
            model_name='bibliographic',
            name='cc_id_load',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cb_cc_id_load', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='acquisitiontool',
            name='cb_ids',
            field=models.ManyToManyField(to='app.Bibliographic'),
        ),
        migrations.AddField(
            model_name='acquisitiontool',
            name='cc_id_load',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='at_cc_id_load', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='acquisitiontool',
            name='cc_id_pub',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='at_cc_id_pub', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='acquisitionmethod',
            name='cb_ids',
            field=models.ManyToManyField(to='app.Bibliographic'),
        ),
        migrations.AddField(
            model_name='acquisitionmethod',
            name='cc_id_load',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='am_cc_id_load', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='acquisitionmethod',
            name='cc_id_pub',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='am_cc_id_pub', to='app.Contact'),
        ),
        migrations.AddField(
            model_name='acquisitionmethod',
            name='cs_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='am_cs_id', to='app.SatelliteAirplane'),
        ),
    ]
